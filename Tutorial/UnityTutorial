From this guy's tutorials: https://www.youtube.com/channel/UCp5WDvPDLCkSZWp9hP5xIvQ

Video 1: https://www.youtube.com/watch?v=rycsXRO6rpI
Files referenced can be found in HumanVsZombies/Tutorial/1
In the Unity Hub, create a new 2D game. 
Do File -> New Scene, then File -> Save Scenes, call it "BasicMovementAndAnim" and save it in the Scenes folder. 
You can change the background color of the scene by clicking the Main Camera cube (cubes are under the Hierarchy tab). 
You can also change the Size of the Main Camera (you'll later see that a bigger number makes the character smaller).
You can also see that Unity has 3 tabs: Scene, Game, and Asset Store. 
Click on Game to see the actual game scene and see that the background color has updated. 

You can find a PNG "BasicMovement.png" in this repository. 
Right click the Assets folder in Unity and create a new folder in it called "Graphics."
Click and drag BasicMovement into the Graphics folder. 
Click on the image and change the setting Filter Mode to Point (no filter) and the setting Compression to None. Click apply. 
Also change Sprite Mode to Multiple and click Apply. 
Then click the Sprite Editor button -> Slice -> Grid By Cell Size. 
The X and Y Pixel Size will vary by the dimensions of the sprite sheet being used,
but for BasicMovement X=188 and Y=205 works. 
Click Slice then Apply, and exit out of the Sprite Editor. 
We have multiple sprite images now!

Now switch to the Scene tab, click and drag a single sprite image (I did BasicMovement_2) to where the camera icon is, 
and now switch back to the Game tab to see the sprite on the board. 
For aesthetic purposes, I changed the background color in Main Camera to match the background color of the sprite sheet,
but ideally when we're actually making the game we're dealing with transparent images. 

Under Assets, create another folder called Scripts. 
In scripts, right click and create a new C# file, call it something like "BasicMovement."
See my BasicMovement.cs script in this repository to get a general idea of how to code that. 

Back in Unity, click the BasicMovement_2 cube, 
which should have appeared in the Hierarchy under Main Camera when you dragged the image onto the scene. 
Click and drag your saved C# script to the blank area under the Add Component button, 
and you should see it appear there.
Now you can click the Play arrow at the top middle of Unity and move the character around!
Click the Play arrow again to stop gameplay. 

Click the BasicMovement_2 cube again and at the top left click Window -> Animation -> Animation. 
In the resulting window, click the Create button.
Make a new folder in Assets called Animation, then save the anim file as "RunLeft."
Select and drag BasicMovement_0-5 into the Animation window. 
Change Samples to 12 (if there is no Samples section next to RunLeft, click the options in the top right of the Animation window and check Show Sample Rate).
Make sure that the animation is set to Loop Time (by going Assets -> Animations -> RunLeft). 
Then click RunLeft in the Animation window and Create New Clip called "RunRight."
Repeat above steps, this time using BasicMovement_6-11. 
Finally, create another animation called "Idle" and repeat the steps again, this time using BasicMovement_2. 

Now click the BasicMovement_2 cube again, then Window -> Animation -> Animator. 
Right click the Idle box and click Set as Layer Default State. 
Within the Animator tab, click the Parameter tab, then +, and select Float and name it Horizontal. 
Left click the Any State box and then click the RunLeft box to create a transition between them. 
Click the arrow which appears between them, and in the resulting tab uncheck Fixed Duration (under Settings), 
change Transition Duration to 0, and uncheck Can Transit to Itself. 
In the same tab under Conditions, click + and make it such that Conditions is less than 0. 
Then, right click the RunLeft box, and Make Transition to the Exit box. 
Click the arrow between them, uncheck Has Exit Time, uncheck Fixed Duration, and set Transition Duration to 0. 
Add the condition that Horizontal be greater than -0.001. 
Now repeat the above with a transition from Any State to RunRight and RunRight to Exit, with greater and less thans switched,
that is Conditions greater than 0 and less than 0.001. 
Click the BasicMovement_2 cube and drag the Animator component (which has the checked box next to it)
into the Animator field of the Basic Movement component. 
Now click the Play arrow and watch the animations of moving the sprite left and right!



Video 2: https://www.youtube.com/watch?v=32VXj5BB7wU&t=5s
Files referenced can be found in HumanVsZombies/Tutorial/2
Input the BasicMovement.png which contains 36 images. 
From tutorial 1: Click on the image and change the setting Filter Mode to Point (no filter) and the setting Compression to None.
Click apply. Also change Sprite Mode to Multiple and click Apply. 
Then click the Sprite Editor button -> Slice -> Grid By Cell Size. 
The X and Y Pixel Size will vary by the dimensions of the sprite sheet being used,
but for this one X=77 and Y=77 works. 
Click Slice then Apply, and exit out of the Sprite Editor. 

From tutorial 1: Click the BasicMovement_2 cube again and at the top left click Window -> Animation -> Animation. 
Click RunLeft in the Animation window and Create New Clip in the Animations folder called "RunLeftDown."
Select and drag BasicMovement_12-17 into the Animation window, and change Samples to 12.
Make sure that the animation is set to Loop Time. 
(There might be size inconsistencies from the images used in tutorial 1.
Simply replace the images from tutorial 1 with the images from this new sprite sheet
by clicking and dragging images 0-5 into RunLeft and 6-11 into RunRight.)
Also repeat this process by creating animations RunRightDown (with images 18-23), RunLeftUp (with images 24-29), and RunRightUp (with images 30-35).

Go to the Animator tab and delete the RunLeft, RunRight, RunLeftDown, RunRightDown, RunLeftUp, and RunRightUp boxes. 
Right click -> Create State -> From New Blend Tree. 
Rename it to "Run" and double click the box. 
Click the Blend Tree box and make sure that its Blend Type is 1D.
In the Motion list, click + and Add Motion Field. Click the circle in the field and select the RunLeft animation.
Repeat the above step and select the RunRight animation.

Add a second Float and call it "Vertical."
Remove RunLeft and RunRight from the Motion list by selecting each and clicking - for each.
Change the Blend Type to 2D Simple Directional. 
Add the animations to the Motion list in this order: RunRight, RunRightUp, RunLeftUp, RunLeft, RunLeftDown, RunRightDown.
Set the second Parameter to Vertical. 
Set the Pos X and Pos Y for each motion: RunRight is (1,0), RunRightUp is (0.5,0.866), RunLeftUp is (-0.5,0.866),
RunLeft is (-1,0), RunLeftDown is (-0.5,-0.866), and RunRightDown is (0.5,-0.866). 
Create another Float and call it "Magnitude."
Go back to the Base Layer of the Animator, right click Idle and Make Transition to Run.
Click on the arrow which appears between them, uncheck Has Exit Time, uncheck Fixed Duration, and set Transition Duration to 0. 
Click the + to add a condition to the Conditions list, make the condition Magnitude greater than 0.
Then Make Transition from Run to Idle, uncheck Has Exit Time, uncheck Fixed Duration, and set Transition Duration to 0.
Add the condition Magnitude less than 0.001 to it. 

See the updated BasicMovement.cs script in folder 2 of this repository.
You should be able to click the Play arrow and watch the sprite animations as you move it around!



Video 3: https://www.youtube.com/watch?v=wBxA_ITtJxw
This video was just a tutorial about how to use Aseprite, which is a software for designing sprites and sprite sheets.
The software itself is a $15 purchase, which isn't bad, but we might just want to animate our Spartan some other way. 
Regardless, I found that the older version of Asesprite is available for free: https://www.aseprite.org/older-versions/



Video 4: https://www.youtube.com/watch?v=TqXHlTeyvgo
Go to Edit -> Project Settings -> Input
Add a new input to Axes by changing 18 to 19. 
Change the name of the new input, which appears at the bottom of the list, to MoveHorizontal. 
(For joystick) Delete all text from all other fields, change Gravity to 1, Dead to 0.2, and Sensitivity to 1.
Set Type to Joystick Axis and Axis to X axis. 
Increment the size of Axes from 19 to 20, change the name of the new axis to MoveVertical, Axis to Y axis, and check Invert. 
Increment to size of Axes from 20 to 21, change the name to Fire, set Positive Button to joystick button 1, 
set Gravity and Sensitivity to 1000, and Dead to 0.001. 
See updated C# script in HumanVsZombies/Tutorial/4



Video 5: https://www.youtube.com/watch?v=W0R7VcMXiwI
This video was just a tutorial about how to use walking and running animations simultaneously. 
I don't really care about having our guy do that. 
The only thing I did was change the type of the Run blend tree from 2D Simple Directional to 2D Freeform Directional. 



Video 6: https://www.youtube.com/watch?v=WdqCbydJ8xk
Add CrossHair.PNG to Assets/Graphics/Archer, change Filter Mode to Point (no filter) and Compression to None. 
Drag the CrossHair image onto the scene, and then under Hierarchy drag the CrossHair cube on top of BasicMovement_2. 
See PlayerController.cs which now replaces BasicMovement.cs. 
In the BasicMovement_2 cube inspector (which opens when you click the BasicMovement_2 cube), 
drag the CrossHair cube (which is a child of BasicMovement_2) to the Cross Hair field under the Player Controller (Script) section.
When you press play, you should be able to aim the cross hair!



Video 7: https://www.youtube.com/watch?v=qMRrRQ587qQ
Add Arrow.PNG to Assets/Graphics/Archer, change Filter Mode to Point (no filter) and Compression to None. 
Drag and drop the arrow into the scene. 
Create a new folder in Assets called Prefabs. Drag the Arrow cube into that folder and then delete Arrow from the hierarchy. 
See updated PlayerController.cs script. 
Click on the BasicMovement_2 cube to open its inspector, and click and drag the Arrow prefab into the Arrow Prefab field under Player Controller (Script).
Click on the Arrow prefab to open its inspector, Add Component button and search to add Rigidbody 2D. Change Gravity Scale to 0.



Video 8: https://www.youtube.com/watch?v=_QVAC69su3Q
See updated PlayerController.cs script. 



Video 9: https://www.youtube.com/watch?v=2MgCWBTpRRs
This video was just about making sprite sheets for the sprite holding a weapon and shooting that weapon. 



Video 10: https://www.youtube.com/watch?v=XWDXZeVODxQ
Part 1 of how to animate the player running and aiming simultaneously. 
Should use later, but we definitely don't have the sprite sheets for those yet. 



Video 11: https://www.youtube.com/watch?v=aXtd5KFf_iE
Part 2 of how to animate the player running and aiming simultaneously. 
Go to the Animator tab and add 4 new parameters: a Bool called Aim, and 3 floats called AimHorizontal, AimVertical, and AimMagnitude.
Add Holding.PNG to Assets/Graphics/Archer, set Filter Mode to Point (no filter), Compression to None, and splice the image. 
Click the BasicMovement_2 cube again and at the top left click Window -> Animation -> Animation. 
Following similar steps from tutorials 1 and 2, create anim files AimLeft, AimRight, AimLeftDown, AimRightDown, AimLeftUp, AimRightUp.
using Holding_0-5, 6-11, 12-17, 18-23, 24-29, 30-35, changing Samples to 12 each time. 
In the Animator tab, delete the resulting AimLeft, etc. boxes and make a copy of Run and rename it Aim. 
Click on the Aim box to open its inspector, click on its Blend Tree, and replace RunLeft with AimLeft, etc. 
Also change the Parameters to AimHorizontal and AimVertical. 
Go back to the Base Layer and add a transition from Any State to Aim. Uncheck Fixed Duration, set Transition Duration to 0, and uncheck Can Transition to Self. 
Add conditions that Aim is true and AimMagnitude greater than 0. 
Back in the Base Layer, create a transition from Aim to Exit. Uncheck Has Exit Time and Fixed Duration, and set Transition Duration to 0. 
Add the condition that Aim is false. 
See updated PlayerController.cs script. 
Uncheck Loop Time on all Aiming animations. 



Video 12: https://www.youtube.com/watch?v=lh3uam5VUaQ
How to do a firing animation. Could be a good reference for State Machines. 



Video 13: https://www.youtube.com/watch?v=lh3uam5VUaQ
See updated PlayerController.cs script.
Also in the CrossHair cube inspector, replace CrossHair.PNG with CrossHair2.PNG in the Sprite value under Sprite Renderer. 
Go to Edit -> Project Settings -> Input and change the Sensitivity of Mouse X and Mouse Y to 0.01. 
Go to File -> Build Settings, click Add Open Scenes, click Build and Run, and save it wherever.
To exit the build on Windows, do Alt F4. 
Since the cursor is now set to be invisible during gameplay, you also have to click the Esc key when playing in the editor. 



Video 14: https://www.youtube.com/watch?v=Az_1gftizBs
This video was just about creating objects which will be added to the setting. 



Video 15: https://www.youtube.com/watch?v=UWhXS6iVsUM
